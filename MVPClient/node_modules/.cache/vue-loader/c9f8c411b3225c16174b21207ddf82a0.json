{"remainingRequest":"/Users/hezitai/Desktop/MVPClient/MVPServer/mvpworkspace/MVPClient/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hezitai/Desktop/MVPClient/MVPServer/mvpworkspace/MVPClient/src/components/mission.vue?vue&type=style&index=0&id=8bd71190&scoped=true&lang=css&","dependencies":[{"path":"/Users/hezitai/Desktop/MVPClient/MVPServer/mvpworkspace/MVPClient/src/components/mission.vue","mtime":1602723401849},{"path":"/Users/hezitai/Desktop/MVPClient/MVPServer/mvpworkspace/MVPClient/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hezitai/Desktop/MVPClient/MVPServer/mvpworkspace/MVPClient/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/hezitai/Desktop/MVPClient/MVPServer/mvpworkspace/MVPClient/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/hezitai/Desktop/MVPClient/MVPServer/mvpworkspace/MVPClient/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hezitai/Desktop/MVPClient/MVPServer/mvpworkspace/MVPClient/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubWlzc2lvbi1ib3ggewogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDEwMCU7Cn0KLm1pc3Npb24tY29udGVudCB7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgLyogbWluLXdpZHRoOiAxMzIwcHg7ICovCiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwp9Ci5mcm9tLWNvbnRlbnQgewogICAgbWFyZ2luLXRvcDogMTBweDsKICAgIG1hcmdpbi1sZWZ0OiA1cHg7Cn0KLmJ0bi1jb250ZW50IHsKICAgIC8qIHBvc2l0aW9uOiBhYnNvbHV0ZTsgKi8KICAgIC8qIHRvcDogMTBweDsgKi8KICAgIC8qIHJpZ2h0OiAyMHB4OyAqLwogICAgcGFkZGluZzogMTVweCAwOwogICAgZGlzcGxheTogZmxleDsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgbWFyZ2luLXJpZ2h0OiAzMHB4Owp9Ci5wYWdlLXRpdGxlIHsKICAgIGZvbnQtc2l6ZTogMTZweDsKICAgIGNvbG9yOiAjNDA5ZWZmOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgbWFyZ2luOiA1cHggMTBweDsKICAgIGxpbmUtaGVpZ2h0OiAzMnB4OwogICAgaGVpZ2h0OiAzMnB4OwogICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlZWU7CiAgICBjdXJzb3I6IGRlZmF1bHQ7Cn0KLnBhZ2UtdGl0bGUgLmNsb3NlLWJ0biB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICByaWdodDogNXB4OwogICAgdG9wOiAwcHg7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICBjb2xvcjogIzMwMzEzMzsKfQoubGVmdC1idG4tYXJlYSB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgICBtYXJnaW4tcmlnaHQ6IDEycHg7Cn0KLmxlZnQtYnRuLWFyZWEgLmVsLWJ1dHRvbiB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIGhlaWdodDogNTBweDsKICAgIHdpZHRoOiAxMDBweDsKICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7Cn0KLmJ0bi1jb250ZW50IC5jcmVhdGUtYnRuIHsKICAgIGRpc3BsYXk6IGJsb2NrOwogICAgLyogaGVpZ2h0OiAxMjBweDsgKi8KfQouZWwtYnV0dG9uICsgLmVsLWJ1dHRvbiB7CiAgICBtYXJnaW4tbGVmdDogMDsKfQoudXNlZGlucHV0W2Rpc2FibGVkXSB7CiAgICBib3JkZXItY29sb3I6ICNlNGU3ZWQ7CiAgICBjb2xvcjogI2U0ZTdlZDsKfQoubGFiZWxmb250IHsKICAgIGZvbnQtc2l6ZTogMTRweDsKICAgIGZvbnQtd2VpZ2h0OiA2MDA7CiAgICBjb2xvcjogIzMwMzEzMzsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIG1hcmdpbi1sZWZ0OiAxOHB4Owp9Ci5mb3JtLWNvbnRlbnQgewogICAgbWFyZ2luOiAxMHB4IDAgMTJweCAwOwp9Cg=="},{"version":3,"sources":["mission.vue"],"names":[],"mappingsjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"mission.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"mission\">\n        <div class=\"mission-box\">\n            <p class=\"page-title\">\n                <span v-show=\"isMaxScreen == true\">任务内容显示</span>\n                <span class=\"close-btn\" style=\"right:26px\" @click=\"handleSize('mission')\" title=\"放大/缩小\"><i :class=\"iconName\"></i></span>\n                <span class=\"close-btn\" @click=\"closeItem\"><i class=\"el-icon-close\"></i></span>\n            </p>\n            <div class=\"mission-content\" v-show=\"isMaxScreen == true\">\n                <el-form ref=\"form\" :model=\"form\" inline class=\"from-content\" size=\"mini\">\n                    <el-form-item label=\"当前任务名称：\" label-width=\"120px\">\n                        <el-input disabled v-model=\"form.missionName\" style=\"width:250px\"></el-input>\n                        <!-- <el-select v-model=\"form.missionCode\" placeholder=\"请选择\" style=\"width:300px\" @change=\"selectMission\">\n                            <el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\" :disabled=\"hasRunningJob\">\n                            </el-option>\n                        </el-select> -->\n                    </el-form-item>\n                    <br />\n                    <el-form-item label=\"当前任务模式：\" label-width=\"120px\">\n                        <el-radio-group disabled v-model=\"form.missionType\">\n                            <el-radio :label=\"5\">定深投放</el-radio>\n                            <el-radio :label=\"80\">距底定距离投放</el-radio>\n                            <!-- 80 -->\n                        </el-radio-group>\n                    </el-form-item>\n                    <el-form-item label=\"当前任务状态：\" label-width=\"120px\">\n                        <el-radio-group disabled v-model=\"form.missionStatus\">\n                            <el-radio :label=\"3\">等待执行</el-radio>\n                            <el-radio :label=\"48\">正在执行</el-radio>\n                            <el-radio :label=\"51\">投放间隔等待</el-radio>\n                            <el-radio :label=\"768\">执行完成</el-radio>\n                            <el-radio :label=\"12288\">已经取消</el-radio>\n                        </el-radio-group>\n                    </el-form-item>\n                    <br />\n                    <el-form-item label=\"每次投放间隔(秒)：\" label-width=\"145px\">\n                        <el-input disabled v-model=\"form.timesThrowSec\" style=\"width:70px\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"距底安全深度(米)：\" label-width=\"145px\">\n                        <el-input disabled v-model=\"form.securityDeepMet\" style=\"width:72px\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"设定深度(米)：\" label-width=\"120px\">\n                        <el-input disabled v-model=\"form.settingDepth\" style=\"width:70px\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"设定投放次数(次)：\" label-width=\"145px\">\n                        <el-input disabled v-model=\"form.settingThrowTimes\" style=\"width:65px\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"当前投放次数(次)：\" label-width=\"145px\">\n                        <el-input disabled v-model=\"form.thisSettingThrowTimes\" style=\"width:65px\"></el-input>\n                    </el-form-item>\n                </el-form>\n                <div class=\"btn-content\" v-show=\"userlevel == 0\">\n                    <div class=\"left-btn-area\">\n                        <!--  v-show=\"userlevel == 0\" -->\n                        <el-button type=\"danger\" @click=\"cancelMission\" :disabled='cancelBtn'>取消当前任务</el-button>\n                        <el-button type=\"success\" @click=\"startingMission\" :disabled='startBtn'>开始执行任务</el-button>\n                    </div>\n                    <!--  :disabled=\"userlevel == 0\" -->\n                    <el-button type=\"primary\" class=\"create-btn\" @click=\"createMission\">增加任务</el-button>\n                </div>\n            </div>\n            <div class=\"minScreen\" v-show=\"isMaxScreen == false\">\n                <div class=\"form-content\">\n                    <span class=\"labelfont\">当前任务状态：</span>\n                    <el-radio-group disabled v-model=\"form.missionStatus\">\n                        <el-radio :label=\"3\">等待执行</el-radio>\n                        <el-radio :label=\"48\">正在执行</el-radio>\n                        <el-radio :label=\"51\">投放间隔等待</el-radio>\n                        <el-radio :label=\"768\">执行完成</el-radio>\n                        <el-radio :label=\"12288\">已经取消</el-radio>\n                    </el-radio-group>\n                </div>\n\n            </div>\n        </div>\n\n        <el-dialog title=\"新增任务\" :visible.sync=\"dialogVisible\" width=\"600px\" :before-close=\"handleClose\">\n            <div>\n                <!--  :rules=\"dialogFromRules\" -->\n                <el-form ref=\"dialogFrom\" :model=\"dialogFrom\" label-width=\"120px\">\n                    <el-form-item label=\"新任务名称\">\n                        <el-input v-model=\"dialogFrom.missionName\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"任务工作模式\">\n                        <el-radio-group v-model=\"dialogFrom.missionType\">\n                            <el-radio :label=\"5\">定深投放</el-radio>\n                            <!-- number 5 -->\n                            <el-radio :label=\"80\">距底定距投放</el-radio>\n                            <!-- 80 -->\n                        </el-radio-group>\n                    </el-form-item>\n                    <el-form-item label=\"设定深度(米)\">\n                        <el-input type='number' v-model=\"dialogFrom.settingDeep\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"设定投放次数(次)\">\n                        <el-input type='number' v-model=\"dialogFrom.settingTimes\" class=\"usedinput\" v-show=\"isMaxTimes==false\" style=\"width:90px;padding-right:20px\"></el-input>\n                        <el-checkbox v-model=\"dialogFrom.checkbox\" @change=\"isSettingTimes\">无限次投放</el-checkbox>\n                    </el-form-item>\n                    <el-form-item type='number' label=\"每次投放间隔(秒)\">\n                        <el-input v-model=\"dialogFrom.settingInterval\"></el-input>\n                    </el-form-item>\n                    <el-form-item type='number' label=\"距底安全深度(米)\">\n                        <el-input v-model=\"dialogFrom.safeDepth\"></el-input>\n                    </el-form-item>\n                </el-form>\n            </div>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogVisible = false\" style=\"margin-right:20px\">取 消</el-button>\n                <el-button type=\"primary\" @click=\"createMissionDialogBtn\">确 定</el-button>\n            </span>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\nimport request from \"@/utils/request.js\";\nexport default {\n    name: 'mission',\n    data() {\n        return {\n            iconName: 'el-icon-top',\n            isMaxScreen: true,\n            userlevel: 0,\n            options: [],\n            startBtn: false,\n            cancelBtn: false,\n            dialogVisible: false,\n            labelPosition: 'right',\n            form: {\n                missionName: '当前暂无任务',\n                missionType: '',\n                missionStatus: '',\n                timesThrowSec: '',\n                securityDeepMet: '',\n                settingDepth: '',\n                settingThrowTimes: '',\n                thisSettingThrowTimes: ''\n            },\n            dialogFrom: {\n                missionName: '',\n                missionType: 5,\n                settingDeep: '',\n                settingTimes: '',\n                settingInterval: '',\n                safeDepth: '',\n                checkbox: false\n            },\n            isMaxTimes: false,\n            realTimeJobId: '',\n            runningJob: [],\n            hasRunningJob: false,\n            waitingJob: [],\n            setinterval: '',\n            setinterval1: '',\n        }\n    },\n    created() {\n        this.userlevel = localStorage.getItem('mvplevel');\n        console.log(this.userlevel + '==>0:USE;1:READONLY;2PLAYBACK')\n    },\n    mounted() {\n        this.getCurrentJob();\n    },\n    methods: {\n        handleSize(ele) {\n            if (this.iconName == 'el-icon-top') {\n                // 缩小\n                this.iconName = 'el-icon-bottom';\n                this.isMaxScreen = false;\n            } else {\n                // 放大\n                this.iconName = 'el-icon-top'\n                this.isMaxScreen = true;\n            }\n            this.$emit('sendEleName', ele);\n        },\n        closeItem() {\n            // open(location, '_self').close();\n            window.location.href = \"about:blank\";\n            window.close();\n        },\n        startingMission() {\n            this.$confirm('是否开始任务？', '提示', {\n                confirmButtonText: '开始',\n                cancelButtonText: '取消',\n                type: 'info'\n            }, 'info').then(() => {\n                this.addCommand({\n                    cmdId: 1280,\n                    cmdContent: 0\n                })\n                this.$message({\n                    type: 'success',\n                    message: '任务开始指令已发送'\n                });\n            }).catch(() => {\n\n            });\n        },\n        cancelMission() {\n            this.$confirm('是否取消当前任务？', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '关闭',\n                type: 'warning'\n            }).then(() => {\n                this.addCommand({\n                    cmdId: 1360,\n                    cmdContent: 0\n                })\n                this.$message({\n                    type: 'success',\n                    message: '任务取消指令已发送'\n                });\n            }).catch(() => {\n\n            });\n        },\n        createMission() {\n            this.dialogVisible = true;\n        },\n        handleClose() {\n            this.dialogVisible = false;\n        },\n        /**\n         * 新增任务按钮 \n        */\n        createMissionDialogBtn() {\n            const _this = this;\n            let params = JSON.parse(JSON.stringify(this.dialogFrom));\n            if (params.checkbox == true) {\n                params.settingTimes = -1\n            }\n            if (!params.missionName) {\n                _this.$message.error('请输入任务名称');\n                return;\n            }\n            if (!params.missionType) {\n                _this.$message.error('请选择工作模式');\n                return;\n            }\n            if (!params.settingDeep) {\n                _this.$message.error('请输入设定深度');\n                return;\n            }\n            if (!params.settingTimes && params.checkbox == false) {\n                _this.$message.error('请设定投放次数');\n                return;\n            }\n            if (!params.settingInterval) {\n                _this.$message.error('请输入投放间隔');\n                return;\n            }\n            if (!params.safeDepth) {\n                _this.$message.error('请输入距底安全深度');\n                return;\n            }\n            if (params.missionName.length > 100) {\n                _this.$message.error('任务名称过长');\n                return\n            }\n            if (params.settingDeep > 10001 || params.settingDeep < 1) {\n                _this.$message.error('设定深度格式错误请重新输入');\n                return\n            }\n            if (params.checkbox == false) {\n                if (params.settingTimes > 10001 || params.settingTimes < 1) {\n                    _this.$message.error('投放次数格式错误请重新输入');\n                    return\n                }\n            }\n            if (params.settingInterval > 301 || params.settingInterval < 1) {\n                _this.$message.error('投放间隔格式错误请重新输入');\n                return\n            }\n            if (Number(params.safeDepth) > Number(params.settingDeep)) {\n                _this.$message.error('距底安全深度格式错误请重新输入');\n                return\n            }\n            params.safeDepth = Number(params.safeDepth);\n            params.settingDeep = Number(params.settingDeep);\n            params.settingInterval = Number(params.settingInterval);\n            params.settingTimes = Number(params.settingTimes);\n            console.log(params);\n            this.addJob(params);\n        },\n        isSettingTimes() {\n            if (this.dialogFrom.checkbox == true) {\n                this.isMaxTimes = true\n            } else {\n                this.isMaxTimes = false\n            }\n        },\n        loopGetMission() {\n            let _this = this;\n            // this.setinterval = window.setInterval(() => {\n            //     // _this.getCurrentJob()\n            // }, 1000)\n        },\n        /**\n         * 新增任务\n        */\n        async addJob(row) {\n            let _this = this;\n            let result = await request({\n                url: \"/job/add_job\",\n                method: \"get\",\n                params: {\n                    jobName: row.missionName,\n                    jobMode: row.missionType,\n                    jobDeep: row.settingDeep,\n                    dropTimes: row.settingTimes,\n                    intervalTime: row.settingInterval,\n                    safeDeep: row.safeDepth,\n                    operateMode: 0,\n                    operateSpeed: 0\n                }\n            });\n            try {\n                console.log(result.data);\n                _this.dialogFrom = {\n                    missionName: '',\n                    missionType: 5,\n                    settingDeep: '',\n                    settingTimes: '',\n                    settingInterval: '',\n                    safeDepth: '',\n                    checkbox: false\n                };\n                _this.isMaxTimes = false;\n                _this.$message({\n                    message: '已添加任务',\n                    type: 'success'\n                });\n                this.dialogVisible = false;\n            } catch (error) {\n                console.log(error);\n                _this.$message({\n                    message: error,\n                    type: 'success'\n                });\n                this.dialogVisible = false;\n            }\n        },\n        /**\n         * 获取当前任务信息\n        */\n        async getRealtimeJob(jobId) {\n            let _this = this;\n            let result = await request({\n                url: \"/job/get_job_realdata\",\n                method: \"get\",\n                params: {\n                    jobId: jobId,\n                }\n            });\n            try {\n                window.clearInterval(_this.setinterval1);\n                if (result.data.length != 0) {\n                    _this.form = {\n                        missionName: result.data[0].jobName,\n                        missionType: result.data[0].jobMode,\n                        missionStatus: result.data[0].jobStatus,\n                        timesThrowSec: result.data[0].intervalTime,\n                        securityDeepMet: result.data[0].safeDeep,\n                        settingDepth: result.data[0].setDeep,\n                        settingThrowTimes: result.data[0].dropTimes == -1 ? '无限次' : result.data[0].dropTimes,\n                        thisSettingThrowTimes: result.data[0].runTimes\n                    }\n                    if (result.data[0].jobStatus >= 768) {\n                        _this.getCurrentJob();\n                    } else {\n                        _this.setinterval1 = window.setInterval(() => {\n                            _this.getRealtimeJob(_this.realTimeJobId);\n                        }, 1000)\n                    }\n                } else {\n\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        },\n\n        /**\n         * 获取最新任务信息\n        */\n        async getCurrentJob() {\n            let _this = this;\n            let result = await request({\n                url: \"/job/get_current_job\",\n                method: \"get\"\n            });\n            try {\n                window.clearInterval(_this.setinterval);\n                if (result.data.length > 0) {\n                    _this.form = {\n                        missionName: result.data[0].jobName,\n                        missionType: result.data[0].jobMode,\n                        missionStatus: result.data[0].jobStatus,\n                        timesThrowSec: result.data[0].intervalTime,\n                        securityDeepMet: result.data[0].safeDeep,\n                        settingDepth: result.data[0].setDeep,\n                        settingThrowTimes: result.data[0].dropTimes == -1 ? '无限次' : result.data[0].dropTimes,\n                        thisSettingThrowTimes: result.data[0].runTimes\n                    };\n                    _this.realTimeJobId = result.data[0].jobId;\n                    _this.getRealtimeJob(_this.realTimeJobId)\n                    // if (result.data[0].jobStatus == 12288) {\n                    //     _this.getRealtimeJob(result.data[0].jobId)\n                    // }\n                } else {\n                    _this.setinterval = window.setInterval(() => {\n                        _this.getCurrentJob()\n                    }, 1000);\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        },\n\n\n        /**\n         * 增加控制指令\n        */\n        async addCommand(row) {\n            let _this = this;\n            let result = await request({\n                url: \"/sys-define/add_command\",\n                method: \"get\",\n                params: {\n                    cmdId: row.cmdId,\n                    cmdContent: row.cmdContent,\n                }\n            });\n            try {\n                console.log(result.data);\n            } catch (error) {\n                console.log(error);\n            }\n        },\n\n        /**\n         * 获取正在执行的任务（旧）\n        */\n        async getRunningJob() {\n            let _this = this;\n            let result = await request({\n                url: \"/job/get_running_job\",\n                method: \"get\"\n            });\n            try {\n                _this.runningJob = result.data;\n                if (result.data.length == 0) {\n                    _this.hasRunningJob = false;\n                    _this.form.missionCode = 1;\n                    if (_this.waitingJob.length == 0) {\n                        _this.form = {\n                            missionCode: '',\n                            missionType: '',\n                            missionStatus: '',\n                            timesThrowSec: '',\n                            securityDeepMet: '',\n                            settingDepth: '',\n                            settingThrowTimes: '',\n                            thisSettingThrowTimes: ''\n                        }\n                        _this.realTimeJobId = ''\n                    } else {\n                        _this.form = {\n                            missionCode: 1,\n                            missionType: _this.waitingJob[0].jobMode,\n                            missionStatus: _this.waitingJob[0].jobStatus,\n                            timesThrowSec: _this.waitingJob[0].dropTimes,\n                            securityDeepMet: _this.waitingJob[0].safeDeep,\n                            settingDepth: _this.waitingJob[0].setDeep,\n                            settingThrowTimes: _this.waitingJob[0].dropTimes,\n                            thisSettingThrowTimes: _this.waitingJob[0].runTimes\n                        }\n                        _this.realTimeJobId = _this.waitingJob[0].jobId;\n                    }\n                } else {\n                    _this.hasRunningJob = true;\n                    if (_this.options.length == 0) {\n                        _this.options.unshift({\n                            value: 0,\n                            label: result.data[0].jobName,\n                            info: result.data[0]\n                        });\n                    }\n                    _this.form = {\n                        missionCode: 0,\n                        missionType: _this.options[0].info.jobMode,\n                        missionStatus: _this.options[0].info.jobStatus,\n                        timesThrowSec: _this.options[0].info.dropTimes,\n                        securityDeepMet: _this.options[0].info.safeDeep,\n                        settingDepth: _this.options[0].info.setDeep,\n                        settingThrowTimes: _this.options[0].info.dropTimes,\n                        thisSettingThrowTimes: _this.options[0].info.runTimes\n                    }\n                    _this.realTimeJobId = _this.options[0].info.jobId;\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        },\n        /**\n         * 获取正在等待执行的任务（旧）\n        */\n        async getWaitingJob() {\n            let _this = this;\n            let result = await request({\n                url: \"/job/get_waiting_job\",\n                method: \"get\"\n            });\n            try {\n                _this.waitingJob = result.data;\n                _this.options.splice(1);\n                for (let i in result.data) {\n                    _this.options.push({\n                        value: _this.options.length + 1,\n                        label: result.data[i].jobName,\n                        info: result.data[i]\n                    });\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        },\n        /**\n         * 获取当前任务的最新信息（旧）\n        */\n        async getJobRealdata(row) {\n            let result = await request({\n                url: \"/job/get_job_realdata\",\n                method: \"get\",\n                params: {\n                    jobId: row.jobId,\n                }\n            });\n            try {\n                console.log(result.data);\n            } catch (error) {\n                console.log(error);\n            }\n        },\n\n\n        /**\n         * 下拉框选择任务  弃用\n         * */\n        selectMission() {\n            for (let i in this.options) {\n                if (this.form.missionCode == this.options[i].value) {\n                    this.form = {\n                        missionCode: this.form.missionCode,\n                        missionType: this.options[i].info.jobMode,\n                        missionStatus: this.options[i].info.jobStatus,\n                        timesThrowSec: this.options[i].info.dropTimes,\n                        securityDeepMet: this.options[i].info.safeDeep,\n                        settingDepth: this.options[i].info.setDeep,\n                        settingThrowTimes: this.options[i].info.dropTimes,\n                        thisSettingThrowTimes: this.options[i].info.runTimes\n                    }\n                    this.realTimeJobId = this.options[i].info.jobId;\n                }\n            }\n        },\n    }\n}\n</script>\n\n<style scoped>\n.mission-box {\n    width: 100%;\n    height: 100%;\n}\n.mission-content {\n    overflow: hidden;\n    /* min-width: 1320px; */\n    display: flex;\n    justify-content: space-between;\n    position: relative;\n}\n.from-content {\n    margin-top: 10px;\n    margin-left: 5px;\n}\n.btn-content {\n    /* position: absolute; */\n    /* top: 10px; */\n    /* right: 20px; */\n    padding: 15px 0;\n    display: flex;\n    justify-content: center;\n    margin-right: 30px;\n}\n.page-title {\n    font-size: 16px;\n    color: #409eff;\n    position: relative;\n    margin: 5px 10px;\n    line-height: 32px;\n    height: 32px;\n    border-bottom: 1px solid #eee;\n    cursor: default;\n}\n.page-title .close-btn {\n    position: absolute;\n    right: 5px;\n    top: 0px;\n    cursor: pointer;\n    color: #303133;\n}\n.left-btn-area {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    margin-right: 12px;\n}\n.left-btn-area .el-button {\n    display: block;\n    height: 50px;\n    width: 100px;\n    white-space: normal;\n}\n.btn-content .create-btn {\n    display: block;\n    /* height: 120px; */\n}\n.el-button + .el-button {\n    margin-left: 0;\n}\n.usedinput[disabled] {\n    border-color: #e4e7ed;\n    color: #e4e7ed;\n}\n.labelfont {\n    font-size: 14px;\n    font-weight: 600;\n    color: #303133;\n    display: inline-block;\n    margin-left: 18px;\n}\n.form-content {\n    margin: 10px 0 12px 0;\n}\n</style>"]}]}